#!/bin/bash

usage() {
  echo "Usage: $0 {dev|prod} {up|down|migrate|key}"
  exit 1
}

update_hosts() {
  ENTRY="127.0.0.1 dev.tallerpro.com"
  OS=$(uname -s)

  case "$OS" in
    "Linux"|"Darwin")
      HOSTS_FILE="/etc/hosts"
      ;;
    "MINGW"*|"MSYS"*)
      HOSTS_FILE="/c/Windows/System32/drivers/etc/hosts"
      ;;
    *)
      echo "Unsupported OS: $OS"
      exit 1
      ;;
  esac

  if grep -q "$ENTRY" "$HOSTS_FILE" 2>/dev/null; then
    echo "Entry '$ENTRY' already exists in $HOSTS_FILE."
    return 0
  fi

  if [ ! -w "$HOSTS_FILE" ]; then
    if [ "$OS" = "Linux" ] || [ "$OS" = "Darwin" ]; then
      echo "Run with sudo: sudo $0 $1 $2"
    else
      echo "Run as Administrator in Git Bash."
    fi
    exit 1
  fi

  BACKUP_FILE="${HOSTS_FILE}.bak.$(date +%Y%m%d%H%M%S)"
  echo "Backing up $HOSTS_FILE to $BACKUP_FILE..."
  cp "$HOSTS_FILE" "$BACKUP_FILE" || { echo "Backup failed"; exit 1; }

  echo "Adding '$ENTRY' to $HOSTS_FILE..."
  echo "$ENTRY" >> "$HOSTS_FILE" || { echo "Failed to update $HOSTS_FILE"; exit 1; }

  echo "Hosts updated! Use http://dev.tallerpro.com:8000"
}


[ $# -lt 2 ] && usage

env=$1
action=$2

case "$env" in
  "dev")
    compose_file="docker-compose.dev.yml"
    env_file=".env.development"
    ;;
  "prod")
    compose_file="docker-compose.prod.yml"
    env_file=".env.production"
    ;;
  *)
    usage
    ;;
esac

cp "$env_file" .env

case "$action" in
  "up")
    docker compose -f "$compose_file" up -d --build
    ;;
  "down")
    docker compose -f "$compose_file" down
    ;;
  "migrate")
    docker compose -f "$compose_file" exec app php artisan migrate
    ;;
  "key")
    docker compose -f "$compose_file" exec app php artisan key:generate
    ;;
  "hosts")
    update_hosts
    ;;
  *)
    usage
    ;;
esac

echo "$env $action completed!"